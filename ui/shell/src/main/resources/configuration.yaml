#
# List of data used by the shell, including
#  - Various data, such as logo, prompt, disclaimer, etc.
#  - The list of commands supported by the shell and their documentation. 
#
# /!\ Please format this file using 80 characters long lines, so as the help 
# messages are nicely formatted on the terminal.
#
# Franck Chauvel - SINTEF ICT
#

#
# The prompt shown to the CloudML shell user
prompt: "CloudML > "

#
# The version number displayed on startup and by the 'version' command
version: CloudML v1.0

#
# The warranty disclaimer, displayed on startup 
disclaimer: |
  This program comes with ABSOLUTELY NO WARRANTY; See LGPL v3 for details.
  This is free software, and you are welcome to redistribute it
  under certain conditions; see LGPL v3 for details.

#
# Define the copyright notice displayed when the CloudML shell is starting
copyright: >
  Copyright (c) 2012 - SINTEF ICT [http://sintef.no]
  
#
# Define the closing message shown by the shell on exit
closingMessage: |
  That's all folks!
  Thank you for using CloudML 

#
# The CloudML logo, displayed on startup
logo: |
  | e88~-_  888                         888      e    e      888     
  |d888   \ 888  e88~-_  888  888  e88~\888     d8b  d8b     888     
  |d888     888 d888   i 888  888 d888  888    d888bdY88b    888     
  |8888     888 8888   | 888  888 8888  888   / Y88Y Y888b   888     
  |Y888   / 888 Y888   ' 888  888 Y888  888  /   YY   Y888b  888     
  | "88_-~  888  "88_-~  "88_-888  "88_/888 /          Y888b 888____ 
 

#
# Below is the list of commands supported by the shell and their related 
# documentation. The information provided here are directly shown to user
# through the 'help' command.
#
commands:
 
 - name: help
   syntax: help [command-name]?
   description: >
     Display information about a given command, if provided. By default it 
     displays the list of available commands.
   examples:
    - syntax: help 
      description: Display the list of available commands
    - syntax: help "exit"
      description: Display specific information about the 'exit' command.
 
 - name: exit
   syntax: exit
   description: |
    Terminate the CloudML Shell session and return to the system prompt.
 
 
 
 - name: dump
   syntax: dump [from <d>]? to <file>
   description: |
     Dump the commands previously entered by user into a text file, which can 
     later be replayed, using the 'replay command' or edited using any text 
     editor. The 'from <d>' option, allows the user to specify how many of the 
     last commands she wants to write in the given file.
   examples:
     - syntax: dump to sessions/mysession.txt
       description: |
         Dump the complete history of commands into the 'sessions/mysession.txt' 
         file
     - syntax: dump 5 to mysession.txt
       description: |
         Dump the last five commands into the file 'mysession.txt'
         
 
 
 - name: replay
   syntax: replay from <file>
   description: |
     Replay all the CloudML shell commands placed into the given file <file>.
   examples:
    - syntax: replay from mysession.txt
      description: |
        Replay all the commands included in the 'mysession.txt' file. 
        
 
 
 - name: history
   syntax: history [<depth>]?
   description: |
     Display the last commands inputed by the user. The optional 
     <depth> parameter let you specify how far you want to visualise the 
     history.
   examples:
    - syntax: history 
      description: |
        Display the complete history of commands.
    - syntax: history 5
      description: |
        Display the last five commands entered by the user. 
        
 - name: messages
   syntax: messages [<depth>]?
   description: |
     Display the last messages sent by the CloudML backend. The <depth> 
     parameter let you specify how far you want to visualise the messages
     history.
   examples:
    - syntax: messages 
      description: |
        Display the complete history of messages.
    - syntax: history 5
      description: |
        Display the last five messages sent by the CloudML back-end. 
 
 - name: start artifact
   syntax: start <artefact-id>
   description: |
     Start the artifact with the given ID.
   examples:
     - syntax: start linux_vm$1
       description: |
        Start the artifact whose ID is "linux_vm$1"
    
 
 
 - name: stop artifact
   syntax: stop <artefact-id>
   description: |
     Stop the artifact with given ID.
   examples:
    - syntax: stop linux_vm$1
      description: |
        Stop the artifact whose ID is "linux_vm$1"

 
 
 - name: instantiate
   syntax: instantiate <type-id> as <instance-id>
   description:
     Add a new instance from the given type into the current deployment model. 
     The resulting instance will be identified by the given instance id (if 
     not already in use in the model)
   examples:
     - syntax: instantiate tomcat as tomcat$2
       description: |
         Create a new instance of the "tomcat" artifact type, named "tomcat$2"
         and add it to the current deployment model. This instance is not yet
         installed on any environment, and the "install" command must be used
         to do so.
         
 - name: destroy
   syntax: destroy <instance-id>
   description: |
     Remove the given instance from the deployment model, and in turn, uninstall 
     all the other instances installed on it (if the instance is an 
     environment). Similarly, if the instance is a software, all instances 
     attached are automatically detached from it.
   examples:
     - syntax: destroy vm_limux$1
       description: |
         Remove the instance whose ID is "vm_limux$1" from the deployment, and
         uninstall all the artifact instance running on it.
         
 - name: install
   syntax: install <software-id> on <environment-id>
   description: |
     Install a given software on a given environment. Software can be either a
     platform or an application. 
   examples:
    - syntax: install tomcat$1 on linux_vm$1
      description: |
        Install the artifact whose ID is "tomcat$1" on the environment whose ID
        is "linux_vm$1"
       
 
 
 - name: uninstall 
   syntax: uninstall <software-id> from <environment-id>
   description: |
     Uninstall a given software from a given environment. Software can either be
     a platform or an application, whereas environments are nodes or platforms.
   examples:
     - syntax: uninstall tomcat$1 from linux_vm$1
       description: |
         Uninstall the artifact whose ID is "tomcat$1" from the environment 
         whose ID is "linux_vm$1"
       
 
 
 - name: attach
   syntax: attach <provider-id> to <consumer-id>
   description: |
     Create a application-level dependency between two "software" artifacts (by
     contrast with environment artifiacts). This command is the counterpart of 
     the "detach command", both can be used to configure artifact before 
     starting them.
   examples:
     - syntax: attach norway.yr to my_service.meteo
       description: |
         Create a binding between the "norway.yr" end-point and the 
         "my_service.meteo" end-point.
  
 
 
 - name: detach
   syntax: detach <provider-id> from <consumer-id>
   description: |
     Remove a application-level dependency between two software artifcats (by
     constrast with environment artifacts). This command is the counter part of 
     the "attach command", and both can be used to configure artifact before
     deployment.
   examples:
     - syntax: detach norway.yr from my_service.meteo
       description: |
         Remove the binding between the "norway.yr" end-point and the 
         "my_service.meteo" end-point.
         
 
 
 - name: load
   syntax: load deployment from <file>
   description: |
     Load a exitsing deployment model from a local file on disk. Supported file
     format are JSON and XMI (as instance of an ECore metamodel). 
   examples:
     - syntax: load deployment from my-apps/configuration.json
       description: |
         Load in memory the deployment configuration described in the "my-apps/
         configuration.json". According to the extension of the given file, the
         file will be read as a JSON file.
       
 
 
 - name: store
   syntax: store deployment in <file>
   description: |
     Store the deployment model actually loaded in memory into the given file.
     If the given file already exists, it will be overridden, and its original 
     content will be lost. The extension of the given file drives the format
     chosen to write the file: ".json" for a JSON file or ".xmi" for an XMI
     file.
   examples:
     - syntax: store deployment in apps/foo.json
       description: |
         Serialise the current deployment model into the file "apps/foo.json" 
         (i.e., as a JSON file as specified by the extension of the file).
       
       
 - name: upload
   syntax: upload <local-file> on <node-id> at <remote-dir>
   description: |
     Upload the given local file on the machine corresponding to the given node
     ID, and place it at the given directory.
   examples:
     - syntax: upload etc/readme.txt on vm_linux$1 at /home/ubuntu 
       description: |
        Upload the file "etc/readme.txt", locally available, on the machine 
        corresponding to the artifact whose ID is "vm_linux$1", and place it in
        the directory "/home/ubuntu".
   
   
 - name: list types
   syntax: lits types
   description: |
     List all the artefact types which exists in the deployment model currently
     loaded (cf. command "load deployment").
   examples:
     - syntax: list types
       description: |
         List all the existing artefacts types.

 - name: list instances
   syntax: lits instances
   description: |
     List all the artefact instances which exists in the deployment model 
     currently loaded (cf. command "load deployment").
   examples:
     - syntax: list instances
       description: |
         List all the existing artefacts instances.
         
 - name: view instance
   syntax: view instance <instance-id>
   description: |
     Show detailed information about the selected instance.
   examples:
     - syntax: view instance vm_linux$1
       description: |
         Show all available information about instance with ID 'vm_linux$1'
         
 - name: view type 
   syntax: view type <type-id>
   description: |
     Show detailed information about a specific artefact type.
   examples:
     - syntax: view type tomcat
       description: |
         Show all the available information about the artefact type with id
         'tomcat'.
         
 - name: deploy
   syntax: deploy
   description: |
     Deploy the deployment model currently in memory. This requires one has 
     loaded a model previsoul (cf. command "load deployment").
   examples:
     - syntax: deploy
       description:
         Effectively deploy the model in memory.
         
 - name: load credentials
   syntax: load credentials from <file>
   description: |
     Load the credentials store in the given file in memory. These credentials
     will then automatically be used to login on the machine and/or on the cloud
     provder services. The extension of the file will automatically drive the
     selection of the proper codec, so far property files only.
   examples:
     - syntax: load credentials from my-credentials.json
       description:
         Load the credentials contained in the file 'my-credentials.json'
         
 - name: store credentials
   syntax: store credentials from <file>
   description: |
    Store the credentials in use into the given file. The extension of the file
    will automatically select the codec used to format the file (if a codec 
    relevant exists). So far, credentials are serialized as property files.
   examples:
     - syntax: load credentials from my-credentials.json
       description:
         Load the credentials contained in the file 'my-credentials.json'
