/**
 * This file is part of CloudML [ http://cloudml.org ]
 *
 * Copyright (C) 2012 - SINTEF ICT
 * Contact: Franck Chauvel <franck.chauvel@sintef.no>
 *
 * Module: root
 *
 * CloudML is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * CloudML is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with CloudML. If not, see
 * <http://www.gnu.org/licenses/>.
 */
package org.cloudml.connectors;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.elasticbeanstalk.*;
import com.amazonaws.services.elasticbeanstalk.model.CheckDNSAvailabilityRequest;
import com.amazonaws.services.elasticbeanstalk.model.CheckDNSAvailabilityResult;
import com.amazonaws.services.elasticbeanstalk.model.CreateApplicationRequest;
import com.amazonaws.services.elasticbeanstalk.model.CreateApplicationResult;
import com.amazonaws.services.elasticbeanstalk.model.CreateApplicationVersionRequest;
import com.amazonaws.services.elasticbeanstalk.model.CreateEnvironmentRequest;
import com.amazonaws.services.elasticbeanstalk.model.CreateEnvironmentResult;
import com.amazonaws.services.elasticbeanstalk.model.DeleteApplicationRequest;
import com.amazonaws.services.elasticbeanstalk.model.ListAvailableSolutionStacksResult;
import com.amazonaws.services.elasticbeanstalk.model.S3Location;
import com.amazonaws.services.elasticbeanstalk.model.TerminateEnvironmentRequest;
import com.amazonaws.services.elasticbeanstalk.model.UpdateEnvironmentRequest;
import com.amazonaws.services.elasticbeanstalk.model.UpdateEnvironmentResult;
import com.amazonaws.services.identitymanagement.model.CreateAccessKeyResult;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.*;

public class BeanstalkConnector implements PaaSConnector{

	private static final Logger journal = Logger.getLogger(BeanstalkConnector.class.getName());

	//private String endpoint="elasticbeanstalk.eu-west-1.amazonaws.com";
	private AWSElasticBeanstalkClient client;
	private AWSCredentials awsCredentials;

	public BeanstalkConnector(String login, String pass, String endpoint){
		awsCredentials=new BasicAWSCredentials(login, pass);
		client=new AWSElasticBeanstalkClient(awsCredentials);
		client.setEndpoint(endpoint);
	}

	public void createApplication(String name){
		CreateApplicationRequest cr=new CreateApplicationRequest();
		cr.setApplicationName(name);
		cr.setDescription("Generated by CloudML");
		CreateApplicationResult res= client.createApplication(cr);
		journal.log(Level.INFO, ">> Status of the application creation: "+res.toString());
	}

	public void terminateApplication(String name){
		DeleteApplicationRequest dr=new DeleteApplicationRequest(name);
		client.deleteApplication(dr);
	}

	public CheckDNSAvailabilityResult checkDNS(String domainName){
		CheckDNSAvailabilityRequest cr=new CheckDNSAvailabilityRequest(domainName);
		CheckDNSAvailabilityResult res=client.checkDNSAvailability(cr);
		journal.log(Level.INFO, ">> Domain Name availability: "+res.toString());
		return res;
	}

	public void createEnvironment(String applicationName, String domainName, String envName, String stackName){
		CreateEnvironmentRequest cr=new CreateEnvironmentRequest();
		cr.setApplicationName(applicationName);
		cr.setEnvironmentName(envName);
		String stack = findSolutionStack(stackName);
		if(!stack.equals("")){
			cr.setSolutionStackName(stack);
			CheckDNSAvailabilityResult r=checkDNS(domainName);
			if(r.isAvailable()){
				cr.setCNAMEPrefix(domainName);
				CreateEnvironmentResult res= client.createEnvironment(cr);
				journal.log(Level.INFO, ">> Status of the environment creation: "+res.toString());
			}else{
				journal.log(Level.INFO, ">> Status of the environment creation: Domain Name already existing");
			}
		}else{
			journal.log(Level.INFO, ">> Status of the environment creation: This type of stack does not exist!");
		}
	}
	
	public void createEnvironmentWithWar(String applicationName, String domainName, String envName, String stackName, File warFile, String versionLabel){
		prepareWar(warFile, versionLabel, applicationName);
		CreateEnvironmentRequest cr=new CreateEnvironmentRequest();
		cr.setApplicationName(applicationName);
		cr.setEnvironmentName(envName);
		cr.setVersionLabel(versionLabel);
		String stack = findSolutionStack(stackName);
		if(!stack.equals("")){
			cr.setSolutionStackName(stack);
			CheckDNSAvailabilityResult r=checkDNS(domainName);
			if(r.isAvailable()){
				cr.setCNAMEPrefix(domainName);
				CreateEnvironmentResult res= client.createEnvironment(cr);
				journal.log(Level.INFO, ">> Status of the environment creation: "+res.toString());
			}else{
				journal.log(Level.INFO, ">> Status of the environment creation: Domain Name already existing");
			}
		}else{
			journal.log(Level.INFO, ">> Status of the environment creation: This type of stack does not exist!");
		}
	}

	public void uploadWar(File warFile, String versionLabel, String applicationName, String envName){
		prepareWar(warFile, versionLabel, applicationName);
		UpdateEnvironmentResult updateEnvironment =
				client.updateEnvironment(new UpdateEnvironmentRequest()
				.withEnvironmentName(envName)
				.withVersionLabel(versionLabel));

	}

	public void prepareWar(File warFile, String versionLabel, String applicationName){
		AmazonS3 s3 = new AmazonS3Client(awsCredentials);
		String bucketName = client.createStorageLocation().getS3Bucket();
		String key;
		try {
			key = URLEncoder.encode(warFile.getName() + "-" + versionLabel, "UTF-8");
			s3.putObject(bucketName, key, warFile);
			client.createApplicationVersion(new CreateApplicationVersionRequest()
			.withApplicationName(applicationName).withAutoCreateApplication(true)
			.withVersionLabel(versionLabel)
			.withSourceBundle(new S3Location(bucketName,key)));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void terminateEnvironment(String envName){
		TerminateEnvironmentRequest tr=new TerminateEnvironmentRequest();
		tr.setEnvironmentName(envName);
		client.terminateEnvironment(tr);
	}


	//to be improved with the detailed version
	public String findSolutionStack(String name){
		ListAvailableSolutionStacksResult list=client.listAvailableSolutionStacks();
		for(String s: list.getSolutionStacks()){
			if(s.contains(name))
				return s;
		}
		return "";
	}

}
